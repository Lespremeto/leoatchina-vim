" python support
if has('python3') && executable('python3')
    let g:python_version = 3
    if !WINDOWS()
        silent! python3 1
    endif
    if v:version == 704 && has('patch774') || v:version >= 800 || has('nvim')
        let g:python3_host_prog = expand(exepath('python3'))
    endif
elseif has('python') && executable('python2')
    let g:python_version = 2
    if !WINDOWS()
        silent! python 1
    endif
    if v:version == 704 && has('patch774') || v:version >= 800 || has('nvim')
        let g:python_host_prog = expand(exepath('python2'))
    endif
else
    let g:python_version = 0
endif
" use vim-plug to install plugs
if (has('job') || g:python_version || has('nvim') || has('lua'))
    " plug install path
    if has('nvim')
        let $PLUG_PATH = '~/.nvim/plug'
    elseif has("gui_running")
        if OSX()
            let $PLUG_PATH = '~/.mvim/plug'
        else
            let $PLUG_PATH = '~/.gvim/plug'
        endif
    else
        let $PLUG_PATH = '~/.vim/plug'
    endif
    set rtp+=$PLUG_PATH
    call plug#begin($PLUG_PATH)
        let g:use_complete    = 1
        let g:use_snippet     = 1
        let g:use_syntax      = 1
        let g:use_ultisnips   = 1
        let g:use_fuzzyfinder = 1
        " Use local config, some tested feature can be add to it
        if filereadable(expand("~/.nvimrc.local")) && has('nvim')
            source ~/.nvimrc.local
        elseif filereadable(expand("~/.mvimrc.local")) && has('gui_macvim')
            source ~/.mvimrc.local
        elseif filereadable(expand("~/.gvimrc.local")) && has('gui_running')
            source ~/.gvimrc.local
        elseif filereadable(expand("~/.vimrc.local"))
            source ~/.vimrc.local
        endif
        if g:use_complete == 0
            let g:use_syntax = 0
        endif
        if WINDOWS()
            Plug 'pprovost/vim-ps1', { 'for': 'ps1' }
            Plug 'leoatchina/vim-support', {'dir':'$HOME\.vim-support'}
            let $PATH.=";".$HOME."\\.vim-support\\tools"
            let $PATH.=";".$HOME."\\.vim-support\\tools\\gtags\\bin"
            let $PATH.=";".$HOME."\\.vim-support\\tools\\cppcheck"
            if has('nvim')
                Plug 'lambdalisue/vim-fullscreen', {'branch': 'master'}
            endif
        elseif OSX()
            Plug 'rizzatti/dash.vim', {'branch': 'master'}
        elseif LINUX() && has('gui_running')
            Plug 'lambdalisue/vim-fullscreen', {'branch': 'master'}
        endif
        " list only the plugin groups you will use
        " general
        Plug 'mhinz/vim-startify', {'branch': 'master'}
        Plug 'scrooloose/nerdcommenter', {'branch': 'master'}
        Plug 'mbbill/undotree', {'branch': 'master'}
        Plug 'mattn/webapi-vim', {'branch': 'master'}
        Plug 'tpope/vim-unimpaired', {'branch': 'master'}
        Plug 'sheerun/vim-polyglot', {'branch': 'master'}
        if (v:version < 800 && !has('nvim')) && !WINDOWS()
            Plug 'Shougo/vimproc.vim', {'do' : 'make', 'branch': 'master'}
        endif
        " dir
        Plug 'justinmk/vim-dirvish', {'branch': 'master'}
        Plug 'kristijanhusak/vim-dirvish-git', {'branch': 'master'}
        Plug 'bounceme/remote-viewer', {'branch': 'master'}
        " input method
        if HasPlug('wubi') || HasPlug('pinyin')
            Plug 'leoatchina/ywvim', {'branch': 'master'}
        endif
        " signs
        if has('signs')
            Plug 'kshenoy/vim-signature', {'branch': 'master'}
            Plug 'gorodinskiy/vim-coloresque', {'branch': 'master'}
            Plug 'rhysd/conflict-marker.vim', {'branch': 'master'}
            Plug 'mhinz/vim-signify', {'branch': 'master'}
        endif
        " indent
        if v:version >= 703 && has('conceal')
            Plug 'Yggdroot/indentLine', {'branch': 'master'}
        endif
        " git
        if v:version < 702
            Plug 'tpope/vim-git', {'branch': 'master'}
        endif
        Plug 'tpope/vim-fugitive', {'branch': 'master'}
        Plug 'Xuyuanp/nerdtree-git-plugin', {'branch': 'master'}
        " text
        Plug 'tpope/vim-surround', {'branch': 'master'}
        Plug 'tpope/vim-repeat', {'branch': 'master'}
        Plug 'tenfyzhong/typecast.vim', {'branch': 'master'}
        Plug 'jiangmiao/auto-pairs', {'branch': 'master'}
        Plug 'junegunn/vim-journal', {'branch': 'master'}
        Plug 'junegunn/vim-easy-align', {'branch': 'master'}
        " markdown
        Plug 'joker1007/vim-markdown-quote-syntax', {'for':'markdown', 'branch': 'master'}
        Plug 'hotoo/pangu.vim', {'for':'markdown', 'branch': 'master'}
        if g:python_version
            Plug 'plasticboy/vim-markdown', {'for':'markdown', 'branch': 'master'}
            if has('nvim')
                Plug 'iamcco/markdown-preview.nvim', {'for':'markdown', 'branch': 'master'}
            else
                Plug 'iamcco/markdown-preview.vim', {'for':'markdown', 'branch': 'master'}
            endif
            Plug 'iamcco/mathjax-support-for-mkdp', {'for':'markdown', 'branch': 'master'}
            if v:version >= 704 || has('nvim')
                Plug 'mzlogin/vim-markdown-toc', {'for':'markdown', 'branch': 'master'}
            endif
        else
            Plug 'tpope/vim-markdown', {'for':'markdown', 'branch': 'master'}
        endif
        " search/replace/finder
        Plug 'google/vim-searchindex', {'branch': 'master'}
        Plug 'easymotion/vim-easymotion', {'branch': 'master'}
        Plug 'sbdchd/neoformat', {'branch': 'master'}
        if v:version >= 800 || has('nvim')
            Plug 'terryma/vim-multiple-cursors', {'branch': 'master'}
            Plug 'wsdjeg/FlyGrep.vim', {'branch': 'master'}
            " Ctrlsf
            if executable('ag') || executable('ack') || executable('rg') || executable('pt')
                Plug 'dyng/ctrlsf.vim', {'branch': 'master'}
            else
                Plug 'brooth/far.vim', {'branch': 'master'}
            endif
        elseif v:version >= 704
            Plug 'terryma/vim-multiple-cursors', {'branch': 'master'}
            Plug 'brooth/far.vim', {'branch': 'master'}
        endif
        " biosyntax
        if HasPlug('bio')
            Plug 'bioSyntax/bioSyntax-vim', {'branch': 'master'}
        endif
        " themes
        Plug 'leoatchina/vim-colorschemes-collections', {'branch': 'master'}
        " statuslines
        if has('statusline')
            Plug 'bling/vim-bufferline', {'branch': 'master'}
            Plug 'itchyny/lightline.vim', {'branch': 'master'}
            if (v:version >= 800 || has('nvim')) && g:use_syntax
                Plug 'maximbaz/lightline-ale', {'branch': 'master'}
            endif
        endif
        " debug tools for python c java ternjs .....
        if HasPlug('debug')
            Plug 'sillybun/vim-repl', {'branch': 'master'}
            Plug 'idanarye/vim-vebugger', {'branch': 'master'}
            Plug 'vim-vdebug/vdebug', {'branch': 'master'}
        endif
        " run tools
        if v:version >= 702
            Plug 'thinca/vim-quickrun', {'branch': 'master'}
        endif
        if v:version >= 800 || has('nvim')
            Plug 'skywind3000/asyncrun.vim', {'branch': 'master'}
        endif
        " HTML
        if HasPlug('html')
            Plug 'mattn/emmet-vim', {'branch': 'master', 'for':['css','htm', 'html', 'xml', 'css3']}
            Plug 'hail2u/vim-css3-syntax', {'branch': 'master', 'for':['css','htm', 'html', 'xml', 'css3']}
        endif
        " PHP
        if HasPlug('php')
            Plug 'shawncplus/phpcomplete.vim', {'branch': 'master', 'for': 'php'}
        endif
        " javascript
        if HasPlug('javascript')
            Plug 'pangloss/vim-javascript', {'branch': 'master', 'for': 'javascript'}
            Plug 'heavenshell/vim-jsdoc', {'branch': 'master','for': 'javascript'}
        endif
        " perl
        if HasPlug('perl') && executable('perl')
            Plug 'vim-perl/vim-perl', {'for': 'perl', 'branch': 'master'}
        endif
        " erlang language
        if HasPlug('erlang') && executable('erlang')
            Plug 'johnzeng/vim-erlang-omnicomplete', {'branch': 'master', 'for': 'erlang'}
        endif
        " julia language
        if HasPlug('julia') && (v:version >= 704 || has('nvim')) && executable('julia')
            Plug 'JuliaEditorSupport/julia-vim', {'branch': 'master', 'for': 'julia'}
        endif
        " java language
        if HasPlug('java') && (v:version >= 704 || has('nvim')) && executable('java')
            Plug 'dansomething/vim-eclim', {'branch': 'master'}
        endif
        " tags
        if  (has('patch1058') && v:version == 703 || v:version >= 704 || has('nvim')) && executable('ctags')
            Plug 'majutsushi/tagbar', {'branch': 'master'}
            if WINDOWS()
                Plug 'lvht/tagbar-markdown', {'commit': '05c095cf0568b1f73f9986dcf11ab14b850824e8', 'for': 'markdown'}
            else
                Plug 'lvht/tagbar-markdown', {'branch': 'master', 'for': 'markdown'}
            endif
        endif
        " gtags
        if executable('gtags') && HasPlug('gtags') && (v:version >= 800 || has('nvim'))
            if exists('$GTAGSCONF')
                Plug 'skywind3000/vim-preview', {'branch': 'master'}
                Plug 'ludovicchabant/vim-gutentags', {'branch': 'master'}
                Plug 'skywind3000/gutentags_plus', {'branch': 'master'}
                Plug 'jsfaint/gen_tags.vim', {'branch': 'master'}
            else
                echom("Please set $GTAGSCONF in your coresponding .local file, and pip install pygments.")
            endif
        endif
        " fuzzy_finder
        if g:use_fuzzyfinder
            " use leaderf as fuzzy_finder
            if (v:version == 704 && has('patch330') || v:version >= 800 || has('nvim')) && g:python_version && !HasPlug('fzf')
                if WINDOWS()
                    Plug 'Yggdroot/LeaderF', {'branch': 'master', 'do': '.\install.bat' }
                else
                    Plug 'Yggdroot/LeaderF', {'branch': 'master', 'do': './install.sh' }
                endif
                Plug 'Yggdroot/LeaderF-marks', {'branch': 'master'}
                let g:fuzzy_finder = 'LeaderF'
            " use fzf
            else
                Plug 'junegunn/fzf.vim', {'branch': 'master'}
                if executable('fzf')
                    Plug 'junegunn/fzf', {'branch': 'master', 'dir': '~/.fzf', 'do': './install --bin'}
                else
                    Plug 'junegunn/fzf', {'branch': 'master', 'dir': '~/.fzf', 'do': './install --all'}
                endif
                let g:fuzzy_finder = 'fzf'
            endif
        else
            let g:fuzzy_finder = "None"
        endif
        " syntax_tools
        if g:use_syntax
            " syntax
            if v:version >= 800 || has('nvim')
                Plug 'w0rp/ale', {'branch': 'master'}
                let g:syntax_tool = 'ale'
            elseif v:version == 704 && has('patch1486')
                Plug 'vim-syntastic/syntastic', {'branch': 'master'}
                let g:syntax_tool = 'syntastic'
            else
                let g:syntax_tool = "None"
            endif
        else
            let g:syntax_tool = "None"
        endif
        " complete engine
        if g:use_complete
            let s:smart_engine_select = 0
            if has('timers')
                if HasPlug('youcompleteme') || HasPlug('YCM')
                    if executable('cmake') && executable('g++') && g:python_version && (has('patch1578') && v:version == 704 || v:version >= 800 ) && !has('nvim')
                        let g:complete_engine = "YCM"
                    else
                        echoe "Cannot install YouCompleteMe, smart select a complete_engine."
                        let s:smart_engine_select = 1
                    endif
                elseif HasPlug('coc')
                    if executable('node') && executable('yarn') && (has('nvim-0.3.0') || v:version >= 801)
                        let g:complete_engine = "coc"
                    else
                        echoe "Cannot install coc, smart select a complete_engine."
                        let s:smart_engine_select = 1
                    endif
                elseif HasPlug('ncm2')
                    if g:python_version == 3 && (has('nvim-0.2.2') || v:version >= 800)
                        let g:complete_engine = "ncm2"
                    else
                        echoe "Cannot install ncm2, smart select a complete_engine."
                        let s:smart_engine_select = 1
                    endif
                elseif HasPlug('deoplete')
                    if g:python_version == 3 && (has('nvim-0.3.0') || v:version >= 800)
                        let g:complete_engine = "deoplete"
                    else
                        echoe "Cannot install deoplete, smart select a complete_engine."
                        let s:smart_engine_select = 1
                    endif
                elseif HasPlug('asyncomplete')
                    if has('nvim') || v:version >= 800
                        let g:complete_engine = "asyncomplete"
                    else
                        echoe "Cannot install asyncomplete, smart select a complete_engine."
                        let s:smart_engine_select = 1
                    endif
                else
                    let s:smart_engine_select = 1
                endif
            elseif HasPlug('neocomplete')
                if has('lua') && (v:version == 703 && has('patch885') || v:version >= 704 || has('nvim'))
                    let g:complete_engine = "neocomplete"
                else
                    echoe "Cannot install neocomplete, smart select a complete_engine."
                    let s:smart_engine_select = 1
                endif
            elseif HasPlug('neocomplcache')
                let g:complete_engine = "neocomplcache"
            else
                let s:smart_engine_select = 1
            endif
            " smart select engine
            if s:smart_engine_select
                if g:python_version == 3 && has('nvim-0.2.2')
                    let g:complete_engine = "ncm2"
                elseif g:python_version == 3 && v:version >= 800
                    let g:complete_engine = "deoplete"
                elseif has('nvim') || v:version >= 800
                    let g:complete_engine = "asyncomplete"
                elseif has('lua') && (v:version == 703 && has('patch885') || v:version >= 704 || has('nvim'))
                    let g:complete_engine = "neocomplete"
                else
                    let g:complete_engine = "neocomplcache"
                endif
            endif
            unlet s:smart_engine_select
        else
            let g:complete_engine = "None"
        endif
        " enginge plus
        if g:complete_engine != "None" && g:use_snippet && (v:version >= 704 || has('nvim'))
            Plug 'Shougo/vimshell.vim', {'branch': 'master'}
            Plug 'Shougo/neoinclude.vim', {'branch': 'master'}
            Plug 'Shougo/neco-vim', {'branch': 'master'}
            Plug 'Shougo/neco-syntax', {'branch': 'master'}
            " install snippets
            Plug 'leoatchina/leoatchina-snippets'
            if (g:python_version == 2 && g:complete_engine == "neocomplcache" || g:python_version && g:complete_engine != "neocomplcache") &&
                    \ g:use_ultisnips &&
                    \ (v:version == 704 && has('patch774') || v:version >= 800 || has('nvim'))
                let g:complete_snippet = "ultisnips"
                Plug 'SirVer/ultisnips', {'branch': 'master'}
                Plug 'honza/vim-snippets', {'branch': 'master'}
            else
                let g:complete_snippet = "neosnippet"
                Plug 'Shougo/neosnippet', {'branch': 'master'}
                Plug 'Shougo/neosnippet-snippets', {'branch': 'master'}
            endif
            let s:engines = ['YCM', 'deoplete', 'neocomplete']
            if index(s:engines, g:complete_engine) >= 0 && g:complete_engine == 'ultisnips'
               Plug 'tenfyzhong/CompleteParameter.vim', {'branch': 'master'}
            endif
        else
            let g:complete_snippet = "None"
        endif
        if g:complete_engine == "YCM"
            let b:ycm_install = " ./install.py "
            if HasPlug('javascript') && executable('node')
                let b:ycm_install = b:ycm_install . " --ts-completer"
            endif
            if HasPlug('c') && executable('clang')
                let b:ycm_install = b:ycm_install . " --clang-completer"
            endif
            if HasPlug('go') && executable('go')
                let b:ycm_install = b:ycm_install . " --go-completer"
            endif
            if HasPlug('rust') && executable('rust')
                let b:ycm_install = b:ycm_install . " --rust-completer"
            endif
            if g:python_version == 2
                Plug 'Valloric/YouCompleteMe',{'branch': 'master', 'do' : 'python2' . b:ycm_install}
            elseif g:python_version == 3
                Plug 'Valloric/YouCompleteMe',{'branch': 'master', 'do' : 'python3' . b:ycm_install}
            endif
        elseif g:complete_engine == "coc"
            " coc not complete python
            function! CocInit()
                let b:coc_install_plugins = [
                    \ 'coc-omni',
                    \ 'coc-tag',
                    \ 'coc-neco',
                    \ 'coc-json',
                    \ 'coc-tslint',
                    \ 'coc-stylelint',
                    \ 'coc-eslint'
                \ ]
                if HasPlug('php') || HasPlug('html')
                    let b:coc_install_plugins = b:coc_install_plugins + [
                        \ 'coc-html',
                        \ 'coc-css',
                        \ 'coc-wxml',
                        \ 'coc-yaml',
                        \ 'coc-emmet'
                    \ ]
                endif
                if HasPlug('javascript')
                    let b:coc_install_plugins = b:coc_install_plugins + [
                        \ 'coc-tsserver',
                        \ 'coc-vetur'
                    \ ]
                endif
                if HasPlug('go')
                    execute 'CocInstall coc-gocode'
                endif
                if HasPlug('java')
                    execute 'CocInstall coc-java'
                endif
                if HasPlug('rust')
                    execute 'CocInstall coc-rls'
                endif
                if g:complete_snippet == 'ultisnips'
                    execute 'CocInstall coc-ultisnips'
                elseif g:complete_snippet == 'neosnippet'
                    execute 'CocInstall coc-neosnippet'
                endif
                execute 'CocInstall '. join(b:coc_install_plugins, " ")
            endfunction
            command! -nargs=0 -bang CocInit call CocInit()
            Plug 'neoclide/coc-neco', {'branch': 'master'}
            Plug 'neoclide/coc-sources', {'branch': 'master'}
            Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install'}
            if g:python_version
                Plug 'neoclide/coc-jedi', {'for': 'python', 'branch': 'master', 'do': 'yarn install'}
            endif
        elseif g:complete_engine == "ncm2"
            Plug 'ncm2/ncm2', {'branch': 'master'}
            Plug 'roxma/nvim-yarp', {'branch': 'master'}
            if !has('nvim')
                Plug 'roxma/vim-hug-neovim-rpc', {'branch': 'master'}
            endif
            " main complete
            Plug 'ncm2/ncm2-bufword', {'branch': 'master'}
            Plug 'ncm2/ncm2-path', {'branch': 'master'}
            Plug 'ncm2/ncm2-tmux', {'branch': 'master'}
            Plug 'ncm2/ncm2-tagprefix', {'branch': 'master'}
            Plug 'ncm2/ncm2-neoinclude', {'branch': 'master'}
            Plug 'filipekiss/ncm2-look.vim', {'branch': 'master'}
            " only use ultisnips
            Plug 'ncm2/ncm2-ultisnips', {'branch': 'master'}
            " language
            Plug 'ncm2/ncm2-jedi', {'branch': 'master', 'for':'python'}
            Plug 'ncm2/ncm2-vim', {'branch': 'master', 'for':'vim'}
            if HasPlug('gtags')
                Plug 'ncm2/gtags', {'branch': 'master'}
            endif
            if HasPlug('php')
                Plug 'phpactor/ncm2-phpactor', {'branch': 'master', 'for': 'php'}
            endif
            if HasPlug('html')
                Plug 'ncm2/ncm2-cssomni', {'branch': 'master', 'for':['css', 'css3']}
            endif
            if HasPlug('javascript') && executable('tern')
                Plug 'ncm2/ncm2-tern', {'branch': 'master', 'for':['javascript', 'typescript']}
            endif
            if HasPlug('c') && executable('clang')
                Plug 'ncm2/ncm2-pyclang', {'branch': 'master', 'for':['c', 'cpp']}
            endif
            if HasPlug('rust') && executable('racer')
                Plug 'ncm2/ncm2-racer', {'branch': 'master', 'for':'rust'}
            endif
            if HasPlug('go') && executable('gocode')
                Plug 'ncm2/ncm2-go', {'branch': 'master', 'for':'go'}
            endif
            if HasPlug('java')
                Plug 'ObserverOfTime/ncm2-jc2', {'branch': 'master', 'for': 'java'}
            endif
            " LCN
            if exists('g:LanguageClient_serverCommands') && has('nvim')
                Plug 'autozimu/LanguageClient-neovim'
            endif
        elseif g:complete_engine == "deoplete"
            if has('nvim')
                Plug 'Shougo/deoplete.nvim', {'branch': 'master', 'do': ':UpdateRemotePlugins'}
            else
                Plug 'Shougo/deoplete.nvim', {'branch': 'master'}
                Plug 'roxma/vim-hug-neovim-rpc', {'branch': 'master'}
                Plug 'roxma/nvim-yarp', {'branch': 'master'}
            endif
            Plug 'zchee/deoplete-jedi', {'for': 'python'}
            if HasPlug('c') && executable('clang')
                Plug 'zchee/deoplete-clang', {'branch': 'master'}
            endif
            if HasPlug('javascript') && executable('tern')
                Plug 'carlitux/deoplete-ternjs', {'branch': 'master'}
                Plug 'mhartington/nvim-typescript', {'branch': 'master'}
            endif
            if HasPlug('rust') && executable('racer')
                Plug 'sebastianmarkow/deoplete-rust', {'branch': 'master'}
            endif
            if HasPlug('go') && executable('gocode')
                Plug 'zchee/deoplete-go', {'branch': 'master', 'do': 'make'}
            endif
            if WINDOWS()
                Plug 'tbodt/deoplete-tabnine', {'branch': 'master', 'do': 'powershell.exe .\install.ps1' }
            else
                Plug 'tbodt/deoplete-tabnine', {'branch': 'master', 'do': 'bash ./install.sh'}
            endif
        elseif g:complete_engine == "asyncomplete"
            Plug 'prabirshrestha/vim-lsp', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete-lsp.vim', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete.vim', {'branch': 'master'}
            Plug 'prabirshrestha/async.vim', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete-file.vim', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete-buffer.vim', {'branch': 'master'}
            Plug 'yami-beta/asyncomplete-omni.vim', {'branch': 'master'}
            " vim
            Plug 'prabirshrestha/asyncomplete-necovim.vim', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete-necosyntax.vim', {'branch': 'master'}
            " c
            if HasPlug('c') && executable('clang')
                Plug 'keremc/asyncomplete-clang.vim', {'branch': 'master'}
            endif
            " ctags
            if executable('ctags')
                Plug 'prabirshrestha/asyncomplete-tags.vim', {'branch': 'master'}
            endif
            if HasPlug('javascript')
                Plug 'prabirshrestha/asyncomplete-flow.vim', {'branch': 'master'}
                Plug 'runoshun/tscompletejob', {'branch': 'master'}
                Plug 'prabirshrestha/asyncomplete-tscompletejob.vim', {'branch': 'master'}
            endif
            if HasPlug('go') && executable('gocode')
                Plug 'prabirshrestha/asyncomplete-gocode.vim', {'branch': 'master'}
            endif
            if HasPlug('rust') && executable('racer')
                Plug 'keremc/asyncomplete-racer.vim', {'branch': 'master'}
            endif
            if g:complete_snippet == 'ultisnips'
                Plug 'prabirshrestha/asyncomplete-ultisnips.vim', {'branch': 'master'}
            elseif g:complete_snippet == 'neosnippet'
                Plug 'prabirshrestha/asyncomplete-neosnippet.vim', {'branch': 'master'}
            endif
        elseif g:complete_engine == "neocomplete"
            Plug 'Shougo/neocomplete.vim', {'branch': 'master'}
            Plug 'davidhalter/jedi-vim', {'for': 'python', 'branch': 'master'}
            if HasPlug('c') && executable('clang')
                Plug 'Rip-Rip/clang_complete', {'branch': 'master'}
            endif
            if HasPlug('rust') && executable('racer')
                Plug 'racer-rust/vim-racer', {'for': 'rust', 'branch': 'master'}
            endif
            if HasPlug('javascript') && executable('tern')
                Plug 'ternjs/tern_for_vim', {'branch': 'master'}
                Plug 'Quramy/tsuquyomi', {'branch': 'master'}
            endif
        elseif g:complete_engine == "neocomplcache"
            Plug 'Shougo/neocomplcache.vim', {'branch': 'master'}
            Plug 'davidhalter/jedi-vim', {'for': 'python', 'branch': 'master'}
            if HasPlug('c') && executable('clang')
                Plug 'Rip-Rip/clang_complete', {'branch': 'master'}
            endif
            if g:complete_snippet == "ultisnips"
                Plug 'JazzCore/neocomplcache-ultisnips', {'branch': 'master'}
            endif
        endif
        unlet g:use_ultisnips
        unlet g:use_snippet
        unlet g:use_complete
        unlet g:use_syntax
        unlet g:use_fuzzyfinder
    call plug#end()
    function! GetVersion()
        let l:result=[]
        if has('nvim')
            let v = api_info().version
            call add(l:result,'nvim-')
            call add(l:result,printf('%d.%d.%d', v.major, v.minor, v.patch))
        else
            redir => l:msg
            silent! execute ':version'
            redir END
            if has('gui_macvim')
                call add(l:result, 'mvim-')
            elseif has('gui_running')
                call add(l:result, 'gvim-')
            else
                call add(l:result, 'vim-')
            endif
            call add(l:result,matchstr(l:msg,'VIM - Vi IMproved\s\zs\d.\d\ze'))
            call add(l:result,matchstr(l:msg, ':\s\d-\zs\d\{1,4\}\ze'))
        endif
        return join(l:result, "")
    endfunction
    function! ShowParams()
        let s:params_dict = {
            \ 'python':g:python_version,
            \ 'engine': g:complete_engine,
            \ 'snippet': g:complete_snippet,
            \ 'fuzzyfinder': g:fuzzy_finder,
            \ 'syntax': g:syntax_tool,
            \ 'version' : GetVersion(),
            \ 'theme': g:colors_name
        \ }
        echo string(s:params_dict)
    endfunction
    command! ShowParams call ShowParams()
    command! PlugRe PlugClean! | PlugInstall --sync
    command! PlugNew PlugClean! | PlugUpdate --sync
else
    echom "In order to install plugins with vim-plug, your vim should be with any of `+job`, `+python`, `+python3`, `+ruby`, '+lua', or use Neovim"
endif
