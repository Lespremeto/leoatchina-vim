" This is leoatchina's vim config forked from https://github.com/spf13/spf13-vim
" Sincerely thank him for his great job, and I have made some change according to own requires.
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
" You can find spf13's origin config  at http://spf13.com
" python support
if has('python3') && executable('python3')
    let g:python_version = 3
    if !WINDOWS()
        silent! python3 1
    endif
elseif has('python') && executable('python')
    let g:python_version = 2
    if !WINDOWS()
        silent! python 1
    endif
else
    let g:python_version = 0
endif
" use vim-plug to install plugs
if (has('job') || python_version || has('nvim') || has('lua'))
    " plug install path
    if has('nvim')
        let $PLUG_PATH = '~/.nvim/plug'
    else
        if has("gui_running")
            let $PLUG_PATH = '~/.gvim/plug'
        else
            let $PLUG_PATH = '~/.vim/plug'
        endif
    endif
    set rtp+=$PLUG_PATH
    call plug#begin($PLUG_PATH)
        " complete_engine && complete_snippet
        let g:complete_engine  = "None"
        let g:complete_snippet = "ultisnips"
        " Use local config, some tested feature can be add to it
        if filereadable(expand("~/.nvimrc.local")) && has('nvim')
            source ~/.nvimrc.local
        elseif filereadable(expand("~/.gvimrc.local")) && has('gui_running')
            source ~/.gvimrc.local
        elseif filereadable(expand("~/.vimrc.local"))
            source ~/.vimrc.local
        endif
        if WINDOWS()
            Plug 'leoatchina/vim-windows-tools', {'dir':'$HOME\.vim-windows-tools'}
            let $PATH.=";".$HOME."\\.vim-windows-tools"
        endif
        " list only the plugin groups you will use
        if !exists('g:plug_groups')
            let g:plug_groups=['smartcomplete', 'php', 'javascript', 'html', 'python']
        endif
        " fullscreen
        if (has('nvim') && WINDOWS()) || (has('gui_running') && !WINDOWS())
            Plug 'lambdalisue/vim-fullscreen'
        endif
        " general
        Plug 'tpope/vim-fugitive'
        if v:version < 702
            Plug 'tpope/vim-git'
        endif
        Plug 'scrooloose/nerdtree'
        Plug 'Xuyuanp/nerdtree-git-plugin'
        Plug 'jistr/vim-nerdtree-tabs'
        Plug 'mhinz/vim-startify'
        Plug 'scrooloose/nerdcommenter'
        Plug 'tpope/vim-commentary'
        Plug 'mbbill/undotree'
        Plug 'leoatchina/vim-colorschemes-collections'
        " text
        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-repeat'
        Plug 'jiangmiao/auto-pairs'
        Plug 'junegunn/vim-easy-align'
        " input method
        if count(g:plug_groups, 'pinyin') || count(g:plug_groups, 'wubi')
            Plug 'leoatchina/ywvim'
        endif
        " biosyntax
        if count(g:plug_groups, 'bio')
            Plug 'bioSyntax/bioSyntax-vim'
        endif
        " markdown
        if has("gui_running") && python_version  " gvim for markdown preview
            Plug 'iamcco/mathjax-support-for-mkdp', {'for':'markdown'}
            Plug 'iamcco/markdown-preview.vim', {'for':'markdown'}
            Plug 'plasticboy/vim-markdown', {'for':'markdown'}
            Plug 'vim-voom/VOoM', {'for': 'markdown'}
            if v:version >= 704
                Plug 'mzlogin/vim-markdown-toc', {'for':'markdown'}
            else
                Plug 'ajorgensen/vim-markdown-toc', {'for':'markdown'}
            endif
        else
            Plug 'tpope/vim-markdown', {'for':'markdown'}
        endif
        Plug 'joker1007/vim-markdown-quote-syntax', {'for':'markdown'}
        " search/replace/finder
        Plug 'google/vim-searchindex'
        Plug 'easymotion/vim-easymotion'
        Plug 'brooth/far.vim'
        if executable('ag') || executable('ack') || executable('rg') || executable('pt')
            Plug 'dyng/ctrlsf.vim'
        elseif v:version >= 800 && !WINDOWS() && executable('ctags')
            Plug 'damage220/vim-finder'
        endif
        " signs
        if has('signs')
            Plug 'kshenoy/vim-signature'
            Plug 'gorodinskiy/vim-coloresque'
            Plug 'rhysd/conflict-marker.vim'
            Plug 'mhinz/vim-signify'
        endif
        if v:version >= 702
            if count(g:plug_groups, 'airline')
                Plug 'vim-airline/vim-airline'
            endif
            Plug 'nathanaelkane/vim-indent-guides'
        endif
        " enhance_status_line
        Plug 'bling/vim-bufferline'
        if has('statusline') && (v:version < 702 || !count(g:plug_groups, 'airline'))
            Plug 'itchyny/lightline.vim'
            if v:version >= 800 && count(g:plug_groups, 'syntax')
                Plug 'maximbaz/lightline-ale'
            endif
        endif
        " PHP
        if count(g:plug_groups, 'php')
            Plug 'arnaud-lb/vim-php-namespace', {'for' : 'php'}
        endif
        " Javascript
        if count(g:plug_groups, 'javascript')
            Plug 'elzr/vim-json', {'for': 'javascript'}
            Plug 'pangloss/vim-javascript', {'for': 'javascript'}
            Plug 'heavenshell/vim-jsdoc', {'for': 'javascript'}
        endif
        " HTML
        if count(g:plug_groups, 'html')
            Plug 'hail2u/vim-css3-syntax', {'for':['css','htm', 'html', 'xml', 'css3']}
            Plug 'tpope/vim-haml'
            Plug 'mattn/emmet-vim'
        endif
        " perl
        if count(g:plug_groups, 'perl') && executable('perl')
            Plug 'vim-perl/vim-perl'
        endif
        if v:version >= 703
            " Pymode for python
            if count(g:plug_groups, 'pymode') && python_version
                Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
            endif
            if executable('ctags')
                Plug 'majutsushi/tagbar'
            endif
        endif
        " syntax check and run method
        if v:version >= 800
            if count(g:plug_groups, 'syntax')
                Plug 'w0rp/ale'
            endif
            if executable('ctags')
                Plug 'ludovicchabant/vim-gutentags'
            endif
            Plug 'skywind3000/asyncrun.vim'
            Plug 'wsdjeg/FlyGrep.vim'
        elseif v:version >= 704
            if count(g:plug_groups, 'syntax')
                Plug 'vim-syntastic/syntastic'
            endif
        endif
        " plugins for vim7.4 or later
        if v:version >= 704
            Plug 'terryma/vim-multiple-cursors'
            Plug 'thinca/vim-quickrun'
            " Go
            if count(g:plug_groups, 'go')
                Plug 'fatih/vim-go', {'for': 'go', 'do':':GoUpdateBinaries'}
                Plug 'garyburd/go-explorer', {'for': 'go'}
                if has('nvim')
                    Plug 'jodosha/vim-godebug', {'for': 'go'}
                endif
            endif
            " java
            if count(g:plug_groups, 'java')
                Plug 'artur-shaik/vim-javacomplete2'
            endif
            " rust
            if count(g:plug_groups, 'rust')
                Plug 'rust-lang/rust.vim'
            endif
            " browser tool
            let g:browser_tool = "ctrlp"
            if count(g:plug_groups, 'fzf')
                if !WINDOWS()
                    let g:browser_tool = "fzf"
                endif
            elseif count(g:plug_groups, 'denite')
                if g:python_version == 3 && v:version >= 800
                    let g:browser_tool = "denite"
                endif
            elseif count(g:plug_groups, 'LeaderF') || count(g:plug_groups, 'leaderf')
                if g:python_version && executable('gcc')
                    let g:browser_tool = "LeaderF"
                endif
            endif
            if g:browser_tool == "fzf"
                Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
                Plug 'junegunn/fzf.vim'
            elseif g:browser_tool == "denite"
                Plug 'shougo/denite.nvim'
            elseif g:browser_tool == "LeaderF"
                if WINDOWS()
                    Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
                else
                    Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
                endif
            else
                Plug 'ctrlpvim/ctrlp.vim'
                Plug 'tacahiroy/ctrlp-funky'
            endif
            " smart select
            if count(g:plug_groups, 'smartcomplete')
                " nvim
                if has('nvim')
                    if v:version >= 800
                        if g:python_version == 3
                            if WINDOWS()
                                let g:complete_engine = "deoplete"
                            else
                                let g:complete_engine = "ncm2"
                            endif
                        else
                            let g:complete_engine = "asyncomplete"
                        endif
                    elseif has('lua')
                        let g:complete_engine = "neocomplete"
                    else
                        let g:complete_engine = "neocomplcache"
                    endif
                " vim8
                elseif v:version >= 800
                    if g:python_version && WINDOWS()
                        let g:complete_engine = "completor"
                    else
                        let g:complete_engine = "asyncomplete"
                    endif
                elseif has('lua')
                    let g:complete_engine = "neocomplete"
                else
                    let g:complete_engine = "neocomplcache"
                endif
            elseif count(g:plug_groups, 'deoplete')
                if g:python_version == 3 && v:version >= 800 && has('timers')
                    let g:complete_engine = "deoplete"
                else
                    echoe "Cannot install deoplete, install neocomplcache instead."
                    let g:complete_engine = "neocomplcache"
                endif
            elseif count(g:plug_groups, 'ncm2')
                if g:python_version == 3 && v:version >= 800 && has('nvim')
                    let g:complete_engine = "ncm2"
                else
                    echoe "Cannot install ncm2, install neocomplcache instead."
                    let g:complete_engine = "neocomplcache"
                endif
            elseif count(g:plug_groups, 'completor')
                if g:python_version && v:version >= 800 && !has('nvim')
                    let g:complete_engine = "completor"
                else
                    echoe "Cannot install completor, install neocomplcache instead."
                    let g:complete_engine = "neocomplcache"
                endif
            elseif count(g:plug_groups, 'asyncomplete')
                if v:version >= 800
                    let g:complete_engine = "asyncomplete"
                else
                    echoe "Cannot install asyncomplete, install neocomplcache instead."
                    let g:complete_engine = "neocomplcache"
                endif
            elseif count(g:plug_groups, 'neocomplete')
                if has('lua')
                    let g:complete_engine = "neocomplete"
                else
                    echoe "Cannot install neocomplete, install neocomplcache instead."
                    let g:complete_engine = "neocomplcache"
                endif
            elseif count(g:plug_groups, 'neocomplcache')
                let g:complete_engine = "neocomplcache"
            elseif count(g:plug_groups, 'youcompleteme') || count(g:plug_groups, 'YCM')
                if executable('cmake') && g:python_version && !WINDOWS()
                    let g:complete_engine = "YCM"
                else
                    echoe "Cannot install YouCompleteMe, install neocomplcache instead."
                    let g:complete_engine = "neocomplcache"
                endif
            endif
            " install snippets plugins
            if g:complete_engine != "None"
                Plug 'Shougo/neco-vim'
            endif
            if g:complete_engine == "neocomplete" || g:complete_engine == "neocomplcache" || count(g:plug_groups, 'snippet')
                if g:python_version && (!has('nvim') || has('nvim') && !WINDOWS()) && g:complete_snippet == "ultisnips"
                    Plug 'SirVer/ultisnips'
                    Plug 'honza/vim-snippets'
                    Plug 'leoatchina/leoatchina-snippets'
                else
                    let g:complete_snippet = "neosnippet"
                    Plug 'Shougo/neosnippet'
                    Plug 'Shougo/neosnippet-snippets'
                endif
            else
                let g:complete_snippet = "None"
            endif
            " install complete plugins
            if g:complete_engine == "deoplete"
                if has('nvim')
                    Plug 'Shougo/deoplete.nvim',  { 'do': ':UpdateRemotePlugins'}
                else
                    Plug 'Shougo/deoplete.nvim'
                    Plug 'roxma/vim-hug-neovim-rpc'
                    Plug 'roxma/nvim-yarp'
                endif
                Plug 'Shougo/neoinclude.vim'
                Plug 'zchee/deoplete-clang', {'for': ['c', 'cpp']}
                Plug 'zchee/deoplete-jedi', {'for': 'python'}
                if count(g:plug_groups, 'go')
                    Plug 'zchee/deoplete-go', {'for': 'go'}
                endif
                if count(g:plug_groups, 'javascript')
                    Plug 'carlitux/deoplete-ternjs'
                endif
            elseif g:complete_engine == "completor"
                Plug 'maralla/completor.vim'
                if g:complete_snippet == "neosnippet"
                    Plug 'maralla/completor-neosnippet'
                endif
            elseif g:complete_engine == "ncm2"
                Plug 'ncm2/ncm2'
                Plug 'roxma/nvim-yarp'
                if !has('nvim')
                    Plug 'roxma/vim-hug-neovim-rpc'
                endif
                " main complete
                Plug 'ncm2/ncm2-bufword'
                Plug 'ncm2/ncm2-path'
                Plug 'ncm2/ncm2-github'
                Plug 'ncm2/ncm2-tagprefix'
                Plug 'filipekiss/ncm2-look.vim'
                Plug 'ncm2/ncm2-vim'
                Plug 'ncm2/ncm2-neoinclude'
                Plug 'Shougo/neoinclude.vim'
                Plug 'Shougo/neco-syntax'
                " only use ultisnips
                if g:complete_snippet == "ultisnips"
                    Plug 'ncm2/ncm2-ultisnips'
                endif
                " language
                Plug 'ncm2/ncm2-pyclang', {'for':['c', 'cpp']}
                Plug 'ncm2/ncm2-jedi', {'for':'python'}
                if count(g:plug_groups, 'html')
                    Plug 'ncm2/ncm2-cssomni', {'for':['css', 'css3']}
                endif
                if count(g:plug_groups, 'javascript')
                    Plug 'ncm2/ncm2-tern', {'for':['javascript', 'typescript']}
                endif
                if count(g:plug_groups, 'rust')
                    Plug 'ncm2/ncm2-racer', {'for':'rust'}
                endif
                if count(g:plug_groups, 'go')
                    Plug 'ncm2/ncm2-go', {'for':'go'}
                endif
            elseif g:complete_engine == "asyncomplete"
                Plug 'prabirshrestha/asyncomplete.vim'
                Plug 'prabirshrestha/async.vim'
                Plug 'prabirshrestha/vim-lsp'
                Plug 'prabirshrestha/asyncomplete-lsp.vim'
                Plug 'yami-beta/asyncomplete-omni.vim'
                Plug 'prabirshrestha/asyncomplete-buffer.vim'
                Plug 'prabirshrestha/asyncomplete-emoji.vim'
                Plug 'prabirshrestha/asyncomplete-file.vim'
                Plug 'prabirshrestha/asyncomplete-tags.vim'
                Plug 'Shougo/neco-syntax'
                Plug 'prabirshrestha/asyncomplete-necovim.vim'
                Plug 'prabirshrestha/asyncomplete-necosyntax.vim'
                if count(g:plug_groups, 'go')
                    Plug 'prabirshrestha/asyncomplete-gocode.vim'
                endif
                if count(g:plug_groups, 'javascript')
                    Plug 'prabirshrestha/asyncomplete-tscompletejob.vim'
                    Plug 'prabirshrestha/asyncomplete-flow.vim'
                endif
                if count(g:plug_groups, 'rust')
                    Plug 'keremc/asyncomplete-racer.vim'
                endif
                if g:complete_snippet == 'ultisnips'
                    Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
                elseif g:complete_snippet == 'neosnippet'
                    Plug 'prabirshrestha/asyncomplete-neosnippet.vim'
                endif
            elseif g:complete_engine == "neocomplete"
                Plug 'Shougo/neoinclude.vim'
                Plug 'Shougo/neocomplete.vim'
            elseif g:complete_engine == "neocomplcache"
                Plug 'Shougo/neocomplcache.vim'
                if g:complete_snippet == 'ultisnips'
                    Plug 'JazzCore/neocomplcache-ultisnips'
                endif
            elseif g:complete_engine == "YCM"
                if g:python_version == 2
                    Plug 'Valloric/YouCompleteMe',{ 'do' : 'python2 ./install.py --clang-completer' }
                elseif g:python_version == 3
                    Plug 'Valloric/YouCompleteMe',{ 'do' : 'python3 ./install.py --clang-completer' }
                endif
            endif
        endif
        " after file
        if filereadable(expand("~/.nvimrc.after")) && has('nvim')
            source ~/.nvimrc.after
        elseif filereadable(expand("~/.gvimrc.after")) && has('gui_running')
            source ~/.gvimrc.after
        elseif filereadable(expand("~/.vimrc.after"))
            source ~/.vimrc.after
        endif
    call plug#end()
    function! s:PlugReinstall()
        :PlugClean
        :PlugInstall
    endfunction
    command! PlugReinstall call s:PlugReinstall()
    function! s:PlugNew()
        :PlugClean
        :PlugUpdate
    endfunction
    command! PlugNew call s:PlugNew()
else
    echom "Inorder to install plugins with vim-plug, your vim should be with any of `+job`, `+python`, `+python3`, `+ruby`, or use Neovim"
endif
