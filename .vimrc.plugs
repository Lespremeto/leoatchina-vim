" python support
if has('python3') && executable('python3')
    let g:python_version = 3
    if !WINDOWS()
        silent! python3 1
    endif
    if v:version == 704 && has('patch774') || v:version >= 800 || has('nvim')
        let g:python3_host_prog = expand(exepath('python3'))
    endif
elseif has('python') && executable('python2')
    let g:python_version = 2
    if !WINDOWS()
        silent! python 1
    endif
    if v:version == 704 && has('patch774') || v:version >= 800 || has('nvim')
        let g:python_host_prog = expand(exepath('python2'))
    endif
else
    let g:python_version = 0
endif
" use vim-plug to install plugs
if (has('job') || g:python_version || has('nvim') || has('lua'))
    " plug install path
    if has('nvim')
        let $PLUG_PATH = '~/.nvim/plug'
    elseif has("gui_running")
        if OSX()
            let $PLUG_PATH = '~/.mvim/plug'
        else
            let $PLUG_PATH = '~/.gvim/plug'
        endif
    else
        let $PLUG_PATH = '~/.vim/plug'
    endif
    set rtp+=$PLUG_PATH
    call plug#begin($PLUG_PATH)
        " complete_engine && complete_snippet
        let g:complete_engine  = "None"
        let g:use_ultisnips = 1
        let g:smart_engine_select = 0
        " $GTAGSCONF should be set in .local file
        let $GTAGSCONF = ""
        " Use local config, some tested feature can be add to it
        if has('nvim') && filereadable(expand("~/.nvimrc.local"))
            source ~/.nvimrc.local
        elseif filereadable(expand("~/.mvimrc.local")) && has('gui_macvim')
            source ~/.mvimrc.local
        elseif filereadable(expand("~/.gvimrc.local")) && has('gui_running')
            source ~/.gvimrc.local
        elseif filereadable(expand("~/.vimrc.local"))
            source ~/.vimrc.local
        endif
        if WINDOWS()
            Plug 'leoatchina/vim-windows-tools', {'dir':'$HOME\.vim-windows-tools'}
            let $PATH.=";".$HOME."\\.vim-windows-tools"
            if has('nvim')
                Plug 'lambdalisue/vim-fullscreen'
            endif
        elseif has('gui_running')
            Plug 'lambdalisue/vim-fullscreen'
            if OSX()
                Plug 'rizzatti/dash.vim'
                nnoremap <D-Cr> <Nop>
                snoremap <D-Cr> <Nop>
                inoremap <D-Cr> <Nop>
                vnoremap <D-Cr> <Nop>
            endif
        endif
        " list only the plugin groups you will use
        if !exists('g:plug_groups')
            let g:plug_groups=['smartcomplete', 'snippet', 'syntax', 'bio']
        endif
        function! HasDirectory(dir)
            return isdirectory(expand($PLUG_PATH."/".a:dir))
        endfunction
        function! HasPlug(plug)
            return count(g:plug_groups, a:plug)
        endfunction
        " general
        Plug 'scrooloose/nerdtree'
        Plug 'jistr/vim-nerdtree-tabs'
        Plug 'mhinz/vim-startify'
        Plug 'scrooloose/nerdcommenter'
        Plug 'mbbill/undotree'
        Plug 'mattn/webapi-vim'
        Plug 'tpope/vim-unimpaired'
        if (v:version < 800 && !has('nvim')) && !WINDOWS()
            Plug 'Shougo/vimproc.vim', {'do' : 'make'}
        endif
        " input method
        if HasPlug('wubi') || HasPlug('pinyin')
            Plug 'leoatchina/ywvim'
        endif
        " signs
        if has('signs')
            Plug 'kshenoy/vim-signature'
            Plug 'gorodinskiy/vim-coloresque'
            Plug 'rhysd/conflict-marker.vim'
            Plug 'mhinz/vim-signify'
            if v:version >= 702
                Plug 'nathanaelkane/vim-indent-guides'
            endif
        endif
        " git
        Plug 'tpope/vim-fugitive'
        Plug 'Xuyuanp/nerdtree-git-plugin'
        if v:version < 702
            Plug 'tpope/vim-git'
        endif
        " text
        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-repeat'
        Plug 'tenfyzhong/typecast.vim'
        Plug 'jiangmiao/auto-pairs'
        Plug 'junegunn/vim-journal'
        Plug 'junegunn/vim-easy-align'
        " markdown
        Plug 'joker1007/vim-markdown-quote-syntax', {'for':'markdown'}
        if has("gui_running") && g:python_version  " gvim for markdown preview
            " voom
            Plug 'vim-voom/VOoM', {'for': 'markdown'}
            Plug 'iamcco/mathjax-support-for-mkdp', {'for':'markdown'}
            Plug 'iamcco/markdown-preview.vim', {'for':'markdown'}
            Plug 'plasticboy/vim-markdown', {'for':'markdown'}
            if v:version >= 704
                Plug 'mzlogin/vim-markdown-toc', {'for':'markdown'}
            else
                Plug 'ajorgensen/vim-markdown-toc', {'for':'markdown'}
            endif
        else
            Plug 'tpope/vim-markdown', {'for':'markdown'}
        endif
        Plug 'joker1007/vim-markdown-quote-syntax', {'for':'markdown'}
        " search/replace/finder
        Plug 'google/vim-searchindex'
        Plug 'easymotion/vim-easymotion'
        " biosyntax
        if HasPlug('bio')
            Plug 'bioSyntax/bioSyntax-vim'
        endif
        " themes
        Plug 'leoatchina/vim-colorschemes-collections'
        " statuslines
        if has('statusline')
            Plug 'bling/vim-bufferline'
            if (v:version >= 800 || has('nvim')) && (HasPlug('airline') || has('gui_running'))
                Plug 'vim-airline/vim-airline'
            else
                Plug 'itchyny/lightline.vim'
                if (v:version >= 800 || has('nvim')) && HasPlug('syntax')
                    Plug 'maximbaz/lightline-ale'
                endif
            endif
        endif
        " search/replace/finder
        Plug 'google/vim-searchindex'
        Plug 'easymotion/vim-easymotion'
        " HTML
        if HasPlug('html')
            Plug 'mattn/emmet-vim', {'for':['css','htm', 'html', 'xml', 'css3']}
            Plug 'hail2u/vim-css3-syntax', {'for':['css','htm', 'html', 'xml', 'css3']}
        endif
        " PHP
        if HasPlug('php')
            Plug 'shawncplus/phpcomplete.vim', {'for': 'php'}
        endif
        " Javascript
        if HasPlug('javascript')
            Plug 'pangloss/vim-javascript', {'for': 'javascript'}
            Plug 'heavenshell/vim-jsdoc', {'for': 'javascript'}
            Plug 'leafgarland/typescript-vim', {'for': 'typescript'}
        endif
        " perl
        if HasPlug('perl')
            Plug 'vim-perl/vim-perl', {'for': 'perl', 'branch': 'dev'}
        endif
        " quickrun
        if v:version >= 702
            Plug 'thinca/vim-quickrun'
        endif
        " ctags
        if  has('patch1058') && v:version == 703 || v:version >= 704 || has('nvim')
            if executable('ctags')
                Plug 'majutsushi/tagbar'
            endif
        endif
        " browser tools & complete tools
        if HasPlug('fzf') && !WINDOWS()
            let g:browser_tool = "fzf"
            Plug 'junegunn/fzf.vim'
            Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        elseif (v:version == 704 && has('patch330') || v:version >= 800 || has('nvim')) && g:python_version
            let g:browser_tool = "LeaderF"
            if WINDOWS()
                Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
            else
                Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
            endif
            Plug 'Yggdroot/LeaderF-marks'
        else
            let g:browser_tool = "ctrlp"
            Plug 'ctrlpvim/ctrlp.vim'
            Plug 'tacahiroy/ctrlp-funky'
        endif
        " syntax check/change and run method
        if v:version >= 800 || has('nvim')
            Plug 'terryma/vim-multiple-cursors'
            Plug 'wsdjeg/FlyGrep.vim'
            Plug 'skywind3000/asyncrun.vim'
            " Ctrlsf
            if executable('ag') || executable('ack') || executable('rg') || executable('pt')
                Plug 'dyng/ctrlsf.vim'
            else
                Plug 'brooth/far.vim'
            endif
            " gtags
            if executable('gtags') && HasPlug('gtags')
                if $GTAGSCONF == ""
                    echom("Please set $GTAGSCONF in your .local file, and pip install pygments!")
                else
                    Plug 'ludovicchabant/vim-gutentags'
                    Plug 'skywind3000/gutentags_plus'
                    Plug 'skywind3000/vim-preview'
                    Plug 'jsfaint/gen_tags.vim'
                endif
            endif
            " syntax
            if HasPlug('syntax')
                Plug 'w0rp/ale'
            endif
        elseif v:version >= 704
            Plug 'terryma/vim-multiple-cursors'
            Plug 'brooth/far.vim'
            if HasPlug('syntax')
                Plug 'vim-syntastic/syntastic'
            endif
        endif
        " complete_engine && snippet
        if (v:version == 704 && has('patch774') || v:version >= 800 || has('nvim')) && has('timers')
            if HasPlug('youcompleteme') || HasPlug('YCM')
                if executable('make') && executable('gcc') && g:python_version && !WINDOWS() && (has('patch1578') && v:version == 704 || v:version >= 800) && !has('nvim')
                    let g:complete_engine = "YCM"
                else
                    echoe "Cannot install YouCompleteMe, smart select a complete_engine."
                    let g:smart_engine_select = 1
                endif
            elseif HasPlug('coc')
                if has('nvim-0.3.0') && executable('node') && executable('yarn')
                    let g:complete_engine = "coc"
                else
                    echoe "Cannot install coc, smart select a complete_engine."
                    let g:smart_engine_select = 1
                endif
            elseif HasPlug('deoplete')
                if g:python_version == 3 && (has('nvim-0.3.0') || v:version>=800)
                   let g:complete_engine = "deoplete"
                else
                    echoe "Cannot install deoplete, smart select a complete_engine."
                    let g:smart_engine_select = 1
                endif
            elseif HasPlug('asyncomplete')
                if has('nvim') || v:version >= 800
                    let g:complete_engine = "asyncomplete"
                else
                    echoe "Cannot install asyncomplete, smart select a complete_engine."
                    let g:smart_engine_select = 1
                endif
            elseif HasPlug('neocomplete')
                if has('lua')
                    let g:complete_engine = "neocomplete"
                else
                    echoe "Cannot install neocomplete, smart select a complete_engine."
                    let g:smart_engine_select = 1
                endif
            elseif HasPlug('neocomplcache')
                let g:complete_engine = "neocomplcache"
            endif
            " smart select engine
            if HasPlug('smartcomplete') || g:smart_engine_select
                " use coc for neovim if yarn installed
                if has('nvim-0.3.0') && executable('node') && executable('yarn')
                    let g:complete_engine = "coc"
                elseif g:python_version == 3 && (has('nvim-0.3.0') || v:version>=800)
                    let g:complete_engine = "deoplete"
                elseif has('nvim') || v:version >= 800
                    let g:complete_engine = "asyncomplete"
                elseif has('lua')
                    let g:complete_engine = "neocomplete"
                else
                    let g:complete_engine = "neocomplcache"
                endif
            endif
            " install snippets plugins
            if HasPlug('snippet')
                Plug 'leoatchina/leoatchina-snippets'
                if g:python_version && g:use_ultisnips == 1
                    let g:complete_snippet = "ultisnips"
                    Plug 'SirVer/ultisnips'
                    Plug 'honza/vim-snippets'
                else
                    let g:complete_snippet = "neosnippet"
                    Plug 'Shougo/neosnippet'
                    Plug 'Shougo/neosnippet-snippets'
                endif
            else
                let g:complete_snippet = "None"
            endif
            unlet g:use_ultisnips
            " enginge plus
            if g:complete_engine != "None"
                Plug 'Shougo/vimshell.vim'
                Plug 'Shougo/neoinclude.vim'
                Plug 'Shougo/neco-vim'
                Plug 'Shougo/neco-syntax'
                let s:engines = ['YCM', 'deoplete', 'neocomplete']
                if index(s:engines, g:complete_engine) >= 0
                    Plug 'tenfyzhong/CompleteParameter.vim'
                endif
            endif
            if g:complete_engine == "YCM"
                if g:python_version == 2
                    Plug 'Valloric/YouCompleteMe',{ 'do' : 'python2 ./install.py --clang-completer' }
                elseif g:python_version == 3
                    Plug 'Valloric/YouCompleteMe',{ 'do' : 'python3 ./install.py --clang-completer' }
                endif
            elseif g:complete_engine == "coc"
                function! CocInit()
                    execute 'CocInstall coc-pyls'
                    execute 'CocInstall coc-tsserver'
                    execute 'CocInstall coc-html'
                    execute 'CocInstall coc-json'
                    execute 'CocInstall coc-css'
                    execute 'CocInstall coc-wxml'
                    execute 'CocInstall coc-vetur'
                    execute 'CocInstall coc-omni'
                    execute 'CocInstall coc-tag'
                    execute 'CocInstall coc-dictionary'
                    if HasPlug('go') && executable('gocode')
                        execute 'CocInstall coc-gocode'
                    endif
                    if HasPlug('java') && executable('java')
                        execute 'CocInstall coc-java'
                    endif
                    if HasPlug('rust') && executable('racer')
                        execute 'CocInstall coc-rls'
                    endif
                    if g:complete_snippet == 'ultisnips'
                        execute 'CocInstall coc-ultisnips'
                    elseif g:complete_snippet == 'neosnippet'
                        execute 'CocInstall coc-neosnippet'
                    endif
                endfunction
                command! -nargs=0 -bang CocInit call CocInit()
                function! CocSetup()
                    if WINDOWS()
                        !.\install.cmd
                    else
                        !./install.sh
                    end
                    call CocInit()
                endfunction
                Plug 'neoclide/coc-neco'
                Plug 'neoclide/coc-sources'
                Plug 'neoclide/coc.nvim', {'do': ':call CocSetup()'}
            elseif g:complete_engine == "deoplete"
                if has('nvim')
                    Plug 'Shougo/deoplete.nvim',  { 'do': ':UpdateRemotePlugins'}
                else
                    Plug 'Shougo/deoplete.nvim'
                    Plug 'roxma/vim-hug-neovim-rpc'
                    Plug 'roxma/nvim-yarp'
                endif
                Plug 'zchee/deoplete-clang'
                Plug 'zchee/deoplete-jedi', {'for': 'python'}
                if HasPlug('javascript') && executable('tern')
                    Plug 'carlitux/deoplete-ternjs'
                    Plug 'mhartington/nvim-typescript'
                endif
                if HasPlug('rust') && executable('racer')
                    Plug 'racer-rust/vim-racer'
                endif
                " use LCN for complete_engine
                if !WINDOWS()
                    Plug 'autozimu/LanguageClient-neovim', {
                        \ 'branch': 'next',
                        \ 'do': 'bash install.sh',
                        \ }
                endif
            elseif g:complete_engine == "asyncomplete"
                Plug 'prabirshrestha/asyncomplete.vim'
                Plug 'prabirshrestha/async.vim'
                Plug 'prabirshrestha/vim-lsp'
                Plug 'prabirshrestha/asyncomplete-lsp.vim'
                Plug 'yami-beta/asyncomplete-omni.vim'
                Plug 'prabirshrestha/asyncomplete-buffer.vim'
                Plug 'prabirshrestha/asyncomplete-emoji.vim'
                Plug 'prabirshrestha/asyncomplete-file.vim'
                " vim
                Plug 'prabirshrestha/asyncomplete-necovim.vim'
                Plug 'prabirshrestha/asyncomplete-necosyntax.vim'
                " ctags
                if executable('ctags')
                    Plug 'prabirshrestha/asyncomplete-tags.vim'
                endif
                if HasPlug('go')
                    Plug 'prabirshrestha/asyncomplete-gocode.vim'
                endif
                if HasPlug('javascript')
                    Plug 'prabirshrestha/asyncomplete-flow.vim'
                    Plug 'runoshun/tscompletejob'
                    Plug 'prabirshrestha/asyncomplete-tscompletejob.vim'
                endif
                if HasPlug('rust') && executable('racer')
                    Plug 'keremc/asyncomplete-racer.vim'
                endif
                if g:complete_snippet == 'ultisnips'
                    Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
                elseif g:complete_snippet == 'neosnippet'
                    Plug 'prabirshrestha/asyncomplete-neosnippet.vim'
                endif
            elseif g:complete_engine == "neocomplete"
                Plug 'Shougo/neocomplete.vim'
                Plug 'davidhalter/jedi-vim'
                Plug 'Rip-Rip/clang_complete'
                if HasPlug('rust') && executable('racer')
                    Plug 'racer-rust/vim-racer'
                endif
                if HasPlug('javascript') && executable('tern')
                    Plug 'ternjs/tern_for_vim'
                    Plug 'Quramy/tsuquyomi'
                endif
            elseif g:complete_engine == "neocomplcache"
                Plug 'Shougo/neocomplcache.vim'
                Plug 'davidhalter/jedi-vim'
                Plug 'Rip-Rip/clang_complete'
                if g:complete_snippet == 'ultisnips'
                    Plug 'JazzCore/neocomplcache-ultisnips'
                endif
            endif
            " java language
            if HasPlug('java')
                if executable('java') && executable('gcc') && executable('make')
                    Plug 'artur-shaik/vim-javacomplete2', {'for': 'java'}
                    Plug 'dansomething/vim-eclim'
                else
                    echoe "In order to install java plugins, you shoud update you system"
                endif
            endif
            " Go language
            if HasPlug('go')
                Plug 'fatih/vim-go', {'for': 'go', 'do':':GoUpdateBinaries'}
            endif
            " rust language
            if HasPlug('rust')
                Plug 'rust-lang/rust.vim', {'for': 'rust'}
            endif
            " julia language
            if HasPlug('julia')
                Plug 'JuliaEditorSupport/julia-vim', {'for': 'julia'}
            endif
            " erlang language
            if HasPlug('erlang')
                Plug 'johnzeng/vim-erlang-omnicomplete', {'for': 'erlang'}
            endif
            " debug tools for python c java ternjs .....
            if HasPlug('debug')
                Plug 'sillybun/vim-repl'
                Plug 'idanarye/vim-vebugger'
            endif
        endif
        " after file
        if filereadable(expand("~/.nvimrc.after")) && has('nvim')
            source ~/.nvimrc.after
        elseif filereadable(expand("~/.gvimrc.after")) && has('gui_running')
            source ~/.gvimrc.after
        elseif filereadable(expand("~/.vimrc.after"))
            source ~/.vimrc.after
        endif
    call plug#end()
    command! PlugRe PlugClean! | PlugInstall --sync
    command! PlugNew PlugClean! | PlugUpdate --sync
else
    echom "In order to install plugins with vim-plug, your vim should be with any of `+job`, `+python`, `+python3`, `+ruby`, or use Neovim"
endif
